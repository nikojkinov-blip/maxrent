from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import db, Provider, MaxAccount
from datetime import datetime, timedelta
from flask import Flask
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///rent.db'
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
db.init_app(app)

bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

ADMIN_IDS = [int(os.getenv('ADMIN_CHAT_ID'))]
TARIFFS = {
    '1_hour': {'price': 7, 'duration': 60, 'emoji': '‚è≥'},
    '2_hours': {'price': 14, 'duration': 120, 'emoji': '‚åõ'}
}

class Form(StatesGroup):
    waiting_for_account = State()
    waiting_for_tariff = State()
    waiting_for_wallet = State()

def main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üì§ –°–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
        KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"),
        KeyboardButton("üí≥ –ö–æ—à–µ–ª–µ–∫")
    )

def tariff_buttons():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("‚è≥ 1 —á–∞—Å - 7 USDT", callback_data="tariff_1_hour"))
    markup.add(InlineKeyboardButton("‚åõ 2 —á–∞—Å–∞ - 14 USDT", callback_data="tariff_2_hours"))
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    with app.app_context():
        provider = Provider.query.filter_by(chat_id=str(message.chat.id)).first()
        if not provider:
            provider = Provider(chat_id=str(message.chat.id))
            db.session.add(provider)
            db.session.commit()
    
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MaxRent!</b>\n\n"
        "üîπ –°–¥–∞–≤–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã Max –≤ –∞—Ä–µ–Ω–¥—É\n"
        "üîπ –ü–æ–ª—É—á–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã –≤ USDT\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode='HTML'
    )

@dp.message_handler(text="üì§ –°–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message):
    await Form.waiting_for_account.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Max —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")

@dp.message_handler(state=Form.waiting_for_account)
async def process_account(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return
    
    login, password = message.text.split()
    async with state.proxy() as data:
        data['login'] = login
        data['password'] = password
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=tariff_buttons())
    await Form.waiting_for_tariff.set()

@dp.callback_query_handler(lambda c: c.data.startswith('tariff_'), state=Form.waiting_for_tariff)
async def process_tariff(callback: types.CallbackQuery, state: FSMContext):
    tariff = callback.data.split('_')[1] + '_' + callback.data.split('_')[2]
    
    async with state.proxy() as data:
        login = data['login']
        password = data['password']
    
    with app.app_context():
        provider = Provider.query.filter_by(chat_id=str(callback.message.chat.id)).first()
        
        account = MaxAccount(
            login=login,
            password=password,
            provider_id=provider.id,
            tariff=tariff
        )
        db.session.add(account)
        db.session.commit()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
        f"üîê –ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
        f"‚è± –¢–∞—Ä–∏—Ñ: {tariff.replace('_', ' ')}\n"
        f"üíµ –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {TARIFFS[tariff]['price']} USDT",
        parse_mode='HTML'
    )
    await state.finish()

@dp.message_handler(text="üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    with app.app_context():
        provider = Provider.query.filter_by(chat_id=str(message.chat.id)).first()
        if provider.wallet_address:
            wallet_info = f"\nüí≥ –ö–æ—à–µ–ª–µ–∫: <code>{provider.wallet_address}</code>"
        else:
            wallet_info = "\n‚ö† –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –ö–æ—à–µ–ª–µ–∫'"
        
        await message.answer(
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {provider.balance} USDT{wallet_info}\n\n"
            f"–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 50 USDT",
            parse_mode='HTML',
            reply_markup=main_menu()
        )

@dp.message_handler(text="üí≥ –ö–æ—à–µ–ª–µ–∫")
async def ask_wallet(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à USDT TRC20 –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'T'):")
    await Form.waiting_for_wallet.set()

@dp.message_handler(state=Form.waiting_for_wallet)
async def save_wallet(message: types.Message, state: FSMContext):
    wallet = message.text.strip()
    if not wallet.startswith('T') or len(wallet) < 25:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞ USDT TRC20. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    with app.app_context():
        provider = Provider.query.filter_by(chat_id=str(message.chat.id)).first()
        provider.wallet_address = wallet
        db.session.commit()
    
    await message.answer(
        f"‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω:\n<code>{wallet}</code>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å",
        parse_mode='HTML',
        reply_markup=main_menu()
    )
    await state.finish()

@dp.message_handler(commands=['rent'])
async def rent_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    with app.app_context():
        accounts = MaxAccount.query.filter_by(is_rented=False).all()
    
    if not accounts:
        return await message.answer("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    text = "üîÑ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</b>\n"
    for acc in accounts[:5]:
        text += f"\nüë§ <code>{acc.login}</code> - {TARIFFS[acc.tariff]['price']} USDT (/rent_{acc.id})"
    
    await message.answer(text, parse_mode='HTML')

@dp.message_handler(lambda msg: msg.text.startswith('/rent_'))
async def process_rent(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        account_id = int(message.text.split('_')[1])
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    with app.app_context():
        account = MaxAccount.query.get(account_id)
        if not account:
            return await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if account.is_rented:
            return await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω")
        
        account.is_rented = True
        account.rented_until = datetime.now() + timedelta(minutes=TARIFFS[account.tariff]['duration'])
        db.session.commit()
        
        await message.answer(
            f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω!</b>\n\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{account.login}</code>\n"
            f"üîê –ü–∞—Ä–æ–ª—å: <code>{account.password}</code>\n"
            f"‚è± –¢–∞—Ä–∏—Ñ: {account.tariff.replace('_', ' ')}\n"
            f"‚è≥ –î–æ: {account.rented_until.strftime('%H:%M')}",
            parse_mode='HTML'
        )

async def main():
    with app.app_context():
        db.create_all()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())